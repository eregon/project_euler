=begin
A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:

    ^(1)/_(2)	= 	0.5
    ^(1)/_(3)	= 	0.(3)
    ^(1)/_(4)	= 	0.25
    ^(1)/_(5)	= 	0.2
    ^(1)/_(6)	= 	0.1(6)
    ^(1)/_(7)	= 	0.(142857)
    ^(1)/_(8)	= 	0.125
    ^(1)/_(9)	= 	0.(1)
    ^(1)/_(10)	= 	0.1

Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that ^(1)/_(7) has a 6-digit recurring cycle.

Find the value of d < 1000 for which ^(1)/_(d) contains the longest recurring cycle in its decimal fraction part.
=end

require 'bigdecimal'
ONE = BigDecimal.new("1")
PRECISION = 1500
MAX_SEQ_LENGTH = 1000
MIN_COMMON = 50

class BigDecimal
  def length_of_recurring_cycle
    chars = to_s('F')[2..-1].chars.to_a.map(&:to_i)
    chars.each_index { |i|
      next if Math.log10(ONE/self-1).floor > i
      ss = chars[i..-1]
      (1..MAX_SEQ_LENGTH).each { |len|
        verify = len < 4 ? 4 : 2
        sequences = ss.each_slice(len).take(verify)
        
        return len if sequences.uniq.size == 1 or (len > PRECISION/2 && sequences[1].size > MIN_COMMON && sequences[0][0...sequences[1].size-1] == sequences[1][0..-2] && (p :short_circuit))
      }
      raise "too big #{self}" if i > chars.size/3
    }
  end
end

p (2..1).select(&:odd?).max_by { |d|
  puts
  n = ONE.div(d, PRECISION)
  p d
  p n.to_f
  p n.length_of_recurring_cycle
} #=> 983 (982 digits)

p ONE.div(983, PRECISION)#.length_of_recurring_cycle
#exit
# 100) 97
# 743: 742
# 503: 502
# 811: 810
# 823: 822
# 937: 936

require "test/unit"
class TestMe < Test::Unit::TestCase
  def t(n)
    ONE.div(n, PRECISION).length_of_recurring_cycle
  end
  def test_2_10
    [1, 1, 2, 1, 1, 6, 3, 1, 1].each_with_index { |len, i|
      assert_equal len, t(i+2)
    }
    assert_equal 486, t(487)
    assert_equal 810, t(811)
    assert_equal 822, t(823)
    assert_equal 936, t(937)
    assert_equal 982, t(983)
  end
end


__END__

10172939979654120040691759918616480162767039674465920651068158697863682604272634791454730417090539165818921668362156663275686673448626653102746693794506612410986775178026449643947100712105798575788402848423194303153611393692777212614445574771108850457782299084435401831129196337741607324516785350966429298067141403865717192268565615462868769074262461851475076297049847405900305188199389623601220752797558494404883011190233977619532044760935910478128179043743641912512716174974567650050864699898270600203458799593082401E-2